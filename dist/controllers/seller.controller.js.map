{"version":3,"sources":["../../src/controllers/seller.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nimport sellerService from '@services/seller.service';\r\n\r\nclass sellerController {\r\n  public sellerService = new sellerService();\r\n\r\n  public getSubscriptionPlans = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.id);\r\n\r\n      const subscriptionPlans = await this.sellerService.getSubscriptiionPlans(userId);\r\n\r\n      res.status(200).json({ subscriptionPlans });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public createSubscribePlans = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.id);\r\n      const subscriptionPlansData = req.body;\r\n\r\n      const createdSubscriptionPlans = await this.sellerService.createSubscribePlans(userId, subscriptionPlansData);\r\n\r\n      res.status(200).json({ createdSubscriptionPlans });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getFollowersCount = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const sellerId = String(req.params.id);\r\n      \r\n      const followersCount = await this.sellerService.getFollowersCount(sellerId);\r\n\r\n      res.status(201).json({ followers: followersCount });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public uploadIdentityCard = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.id);\r\n      \r\n      const identityCardData = req.files;\r\n      \r\n      await this.sellerService.uploadIdentityCard(identityCardData, userId);\r\n\r\n      res.status(201).json({ message: \"identity card haq been uploaded successfully\", status: 200 });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n}\r\n\r\nexport default sellerController;\r\n"],"names":["sellerController","sellerService","getSubscriptionPlans","req","res","next","userId","String","params","id","subscriptionPlans","getSubscriptiionPlans","status","json","error","createSubscribePlans","subscriptionPlansData","body","createdSubscriptionPlans","getFollowersCount","sellerId","followersCount","followers","uploadIdentityCard","identityCardData","files","message"],"mappings":";;;;+BA0DA;;;eAAA;;;sEAzD0B;;;;;;;;;;;;;;;;;;;AAE1B,IAAA,AAAMA,mBAAN,MAAMA;;QACJ,uBAAOC,iBAAgB,IAAIA,sBAAa;QAExC,uBAAOC,wBAAuB,OAAOC,KAAcC,KAAeC;YAChE,IAAI;gBACF,MAAMC,SAASC,OAAOJ,IAAIK,MAAM,CAACC,EAAE;gBAEnC,MAAMC,oBAAoB,MAAM,IAAI,CAACT,aAAa,CAACU,qBAAqB,CAACL;gBAEzEF,IAAIQ,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEH;gBAAkB;YAC3C,EAAE,OAAOI,OAAO;gBACdT,KAAKS;YACP;QACF;QAEA,uBAAOC,wBAAuB,OAAOZ,KAAcC,KAAeC;YAChE,IAAI;gBACF,MAAMC,SAASC,OAAOJ,IAAIK,MAAM,CAACC,EAAE;gBACnC,MAAMO,wBAAwBb,IAAIc,IAAI;gBAEtC,MAAMC,2BAA2B,MAAM,IAAI,CAACjB,aAAa,CAACc,oBAAoB,CAACT,QAAQU;gBAEvFZ,IAAIQ,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEK;gBAAyB;YAClD,EAAE,OAAOJ,OAAO;gBACdT,KAAKS;YACP;QACF;QAEA,uBAAOK,qBAAoB,OAAOhB,KAAcC,KAAeC;YAC7D,IAAI;gBACF,MAAMe,WAAWb,OAAOJ,IAAIK,MAAM,CAACC,EAAE;gBAErC,MAAMY,iBAAiB,MAAM,IAAI,CAACpB,aAAa,CAACkB,iBAAiB,CAACC;gBAElEhB,IAAIQ,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAES,WAAWD;gBAAe;YACnD,EAAE,OAAOP,OAAO;gBACdT,KAAKS;YACP;QACF;QAEA,uBAAOS,sBAAqB,OAAOpB,KAAcC,KAAeC;YAC9D,IAAI;gBACF,MAAMC,SAASC,OAAOJ,IAAIK,MAAM,CAACC,EAAE;gBAEnC,MAAMe,mBAAmBrB,IAAIsB,KAAK;gBAElC,MAAM,IAAI,CAACxB,aAAa,CAACsB,kBAAkB,CAACC,kBAAkBlB;gBAE9DF,IAAIQ,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEa,SAAS;oBAAgDd,QAAQ;gBAAI;YAC9F,EAAE,OAAOE,OAAO;gBACdT,KAAKS;YACP;QACF;;AACF;MAEA,WAAed"}