{"version":3,"sources":["../../src/controllers/post.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nimport postService from '@/services/post.service';\r\n\r\nclass postController {\r\n  public postService = new postService();\r\n\r\n  public getPopularAlbums = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.id);\r\n      const popularPosts = await this.postService.getPopularAlbums(userId);\r\n\r\n      res.status(201).json({ popularPosts });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getRandomAlbums = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const page = Number(req.params.page);\r\n      const userId = String(req.params.id);\r\n      \r\n      const randomAlbums = await this.postService.getRandomAlbums(page, userId);\r\n\r\n      res.status(201).json( randomAlbums );\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getAlbumByCategory = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const categoryId = String(req.params.id);\r\n      const AlbumByCategory = await this.postService.getAlbumByCategory(categoryId);\r\n\r\n      res.status(201).json({ AlbumByCategory });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  }\r\n\r\n  public getPostPictures = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const postId = String(req.params.id);\r\n      const postPictures = await this.postService.getPostPictures(postId);\r\n\r\n      res.status(201).json({ data: postPictures });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getAllAlbums = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.userId);\r\n      const allAlbums = await this.postService.getAllAlbums(userId);\r\n      \r\n\r\n      res.status(201).json({ allAlbums });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getSellerAlbum = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.id);\r\n      console.log(userId);\r\n      \r\n      const sellerAlbums = await this.postService.getSellerAlbums(userId);\r\n      \r\n      res.status(201).json(sellerAlbums);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getCategories = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const categories = await this.postService.getCategories();\r\n\r\n      console.log(categories);\r\n      \r\n\r\n      res.status(201).json({ categories });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public updateViews = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const postId = String(req.params.id);\r\n      const updatedViews = await this.postService.UpdateViews(postId);\r\n\r\n      res.status(201).json({ updatedViews });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public likePost = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const albumId = String(req.params.id);\r\n      const userId = req.body.userId;\r\n      await this.postService.likePost(albumId, userId);\r\n\r\n      res.status(201).json({ message: \"post liked successfully\" });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getAlbumPlan = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const albumId = String(req.params.id);\r\n      let plan = await this.postService.getAlbumPlan(albumId);\r\n\r\n      res.status(200).json(plan);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public createPost = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const postData = req.body;\r\n      const userId = String(req.params.id);\r\n      const createdPost = await this.postService.createPost(userId, postData);\r\n\r\n      res.status(201).json({ data: createdPost });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n  \r\n\r\n  public uploadPostPictures = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const pictureFiles = req.files;\r\n      const collectionId = String(req.params.id);\r\n      await this.postService.uploadPostPictures(pictureFiles, collectionId);\r\n\r\n      res.status(201).json({ message: \"post pictures have been uploaded successfully\" });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n}\r\n\r\nexport default postController;\r\n"],"names":["postController","postService","getPopularAlbums","req","res","next","userId","String","params","id","popularPosts","status","json","error","getRandomAlbums","page","Number","randomAlbums","getAlbumByCategory","categoryId","AlbumByCategory","getPostPictures","postId","postPictures","data","getAllAlbums","allAlbums","getSellerAlbum","console","log","sellerAlbums","getSellerAlbums","getCategories","categories","updateViews","updatedViews","UpdateViews","likePost","albumId","body","message","getAlbumPlan","plan","createPost","postData","createdPost","uploadPostPictures","pictureFiles","files","collectionId"],"mappings":"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"}