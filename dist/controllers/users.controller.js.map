{"version":3,"sources":["../../src/controllers/users.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nimport { CreateUserDto } from '@dtos/users.dto';\r\nimport { User } from '@interfaces/users.interface';\r\nimport userService from '@services/users.service';\r\n\r\nclass UsersController {\r\n  public userService = new userService();\r\n\r\n  public getUsers = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const findAllUsersData: User[] = await this.userService.findAllUser();\r\n\r\n      res.status(200).json({ data: findAllUsersData, message: 'findAll' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getUserById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.id);\r\n      const findOneUserData = await this.userService.findUserById(userId);\r\n\r\n      res.status(200).json(findOneUserData);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public generateAiPictures = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const color = req.body.color;\r\n      const category = req.body.category;\r\n\r\n      const generatedPictures = await this.userService.generateAiPictures(color, category);\r\n      \r\n\r\n      res.status(200).json(generatedPictures);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public checkForSale = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const postId = String(req.params.postId);\r\n      const userId = String(req.params.userId);\r\n      const plan = String(req.params.plan);\r\n      const checkedFOrSale = await this.userService.checkForSale(userId, postId);\r\n      const checkForSubscription = await this.userService.checkForSubscriptionbyUserId(userId, postId, plan);\r\n\r\n      console.log(checkForSubscription);\r\n      res.status(200).json(checkedFOrSale || checkForSubscription);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getSellerPlans = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.id);\r\n      const sellerPlans = await this.userService.getSellerPlans(userId);\r\n\r\n      res.status(200).json({ data: sellerPlans });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public changePassword = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const email = String(req.params.email);\r\n      const userData = req.body;\r\n      const findOneUserData = await this.userService.changePassword(email, userData);\r\n\r\n      res.status(200).json({ data: findOneUserData, message: 'findOne' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public emailConfirming = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const token = String(req.params.token);\r\n      const confirmed = await this.userService.emailConfirming(token);\r\n\r\n      res.status(201).redirect(\"/\");\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public buyPost = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.id);\r\n      const saleData = req.body;\r\n\r\n      const boughtPost = await this.userService.buyPosts(userId, saleData);\r\n\r\n      res.status(200).json({ url: boughtPost });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public subscribe = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.id);\r\n      const subscriptionData = req.body;\r\n\r\n      const subscribeSssion = await this.userService.subscribe(userId, subscriptionData);\r\n\r\n      res.status(200).json(subscribeSssion);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public cancelSubscription = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n\r\n    try {\r\n      const userId = String(req.params.id);\r\n      const sellerId = String(req.params.sellerId);\r\n\r\n      const canceledSubscription = await this.userService.cancelSubscription(userId, sellerId);\r\n\r\n      res.status(200).json({ canceledSubscription: canceledSubscription });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public checkForSubscribtion = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.id);\r\n      const postId = req.body.data.postId;\r\n\r\n      const isSubscribed = await this.userService.checkForSubscription(userId, postId);\r\n\r\n      res.status(200).json({ data: isSubscribed });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public updateUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.id);\r\n\r\n      const userData: CreateUserDto = req.body;\r\n      const updateUserData: User[] = await this.userService.updateUser(userId, userData);\r\n\r\n      res.status(200).json({ data: updateUserData, message: 'updated' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public uploadDeviceToken = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.id);\r\n      const token = req.body.token;\r\n      await this.userService.uploadDeviceToken(userId, token);\r\n\r\n      res.status(200).json({ message: 'token uploaded succcessfully' });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public desactivateUser = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = Number(req.params.id);\r\n      const desactivatedUser = await this.userService.desactivateUser(userId);\r\n\r\n      res.status(200).json({ data: desactivatedUser });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public uploadAvatar = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userId = String(req.params.id);\r\n\r\n      const avatarData = req.file;\r\n\r\n      await this.userService.uploadAvatar(avatarData, userId);\r\n\r\n      res.status(201).json({ messazge: \"avatar has been uploaded successfully\" });\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n}\r\n\r\nexport default UsersController;\r\n"],"names":["UsersController","userService","getUsers","req","res","next","findAllUsersData","findAllUser","status","json","data","message","error","getUserById","userId","String","params","id","findOneUserData","findUserById","generateAiPictures","color","body","category","generatedPictures","checkForSale","postId","plan","checkedFOrSale","checkForSubscription","checkForSubscriptionbyUserId","console","log","getSellerPlans","sellerPlans","changePassword","email","userData","emailConfirming","token","confirmed","redirect","buyPost","saleData","boughtPost","buyPosts","url","subscribe","subscriptionData","subscribeSssion","cancelSubscription","sellerId","canceledSubscription","checkForSubscribtion","isSubscribed","updateUser","updateUserData","uploadDeviceToken","desactivateUser","Number","desactivatedUser","uploadAvatar","avatarData","file","messazge"],"mappings":"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"}