{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport express from 'express';\nimport helmet from 'helmet';\nimport neo4j from 'neo4j-driver';\nimport hpp from 'hpp';\nimport morgan from 'morgan';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport swaggerUi from 'swagger-ui-express';\nimport { NODE_ENV, PORT, LOG_FORMAT, ORIGIN, CREDENTIALS } from '@config';\nimport { Routes } from '@interfaces/routes.interface';\nimport errorMiddleware from '@middlewares/error.middleware';\nimport { logger, stream } from '@utils/logger';\nimport nodemailer from 'nodemailer';\nimport hbs from 'nodemailer-express-handlebars';\nimport path from 'path';\n\nexport const transporter = nodemailer.createTransport({\n  service: process.env.SERVICE,\n  secure: Boolean(process.env.SECURE),\n  auth: {\n    user: process.env.USER,\n    pass: process.env.PASS,\n  },\n});\n\nclass App {\n  public app: express.Application;\n  public env: string;\n  public port: string | number;\n\n  constructor(routes: Routes[]) {\n    this.app = express();\n    this.env = NODE_ENV || 'development';\n    this.port = PORT || 3000;\n\n    this.initializeMiddlewares();\n    this.initializeRoutes(routes);\n    this.initializeSwagger();\n    this.initializeErrorHandling();\n  }\n\n  public listen() {\n    this.app.listen(this.port, () => {\n      logger.info(`=================================`);\n      logger.info(`======= ENV: ${this.env} =======`);\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\n      logger.info(`=================================`);\n    });\n  }\n\n  public getServer() {\n    return this.app;\n  }\n  \n  \n\n  private initializeMiddlewares() {\n    this.app.use(morgan(LOG_FORMAT, { stream }));\n    this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\n    this.app.use(hpp());\n    this.app.use(helmet());\n    this.app.use(compression());\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use(cookieParser());\n    console.log(__dirname);\n    transporter.use(\n      'compile',\n      hbs({\n        viewEngine: {\n          extname: '.handlebars',\n          layoutsDir: path.resolve(__dirname,'../public/views/'),\n          partialsDir: path.resolve(__dirname,'../public/views/'),\n        },\n        viewPath: path.resolve(__dirname,'../public/views/'),\n        extName: '.handlebars',\n      }),\n    );\n  }\n\n  private initializeRoutes(routes: Routes[]) {\n    routes.forEach(route => {\n      this.app.use('/', route.router);\n    });\n  }\n  private initializeSwagger() {\n    const options = {\n      swaggerDefinition: {\n        info: {\n          title: 'REST API',\n          version: '1.0.0',\n          description: 'Example docs',\n        },\n      },\n      apis: ['swagger.yaml'],\n    };\n\n    const specs = swaggerJSDoc(options);\n    this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));\n  }\n\n  private initializeErrorHandling() {\n    this.app.use(errorMiddleware);\n  }\n}\n\nexport function initializeDbConnection() {\n  try {\n    const driver = neo4j.driver(process.env.NEO4J_URI, neo4j.auth.basic(process.env.NEO4J_USERNAME, process.env.NEO4J_PASSWORD));\n\n    driver.verifyConnectivity();\n    console.log('Driver created');\n    return driver;\n  } catch (error) {\n    console.log(`connectivity verification failed. ${error}`);\n  }\n}\n\nexport default App;\n"],"names":["transporter","initializeDbConnection","nodemailer","createTransport","service","process","env","SERVICE","secure","Boolean","SECURE","auth","user","USER","pass","PASS","App","listen","app","port","logger","info","getServer","initializeMiddlewares","use","morgan","LOG_FORMAT","stream","cors","origin","ORIGIN","credentials","CREDENTIALS","hpp","helmet","compression","express","json","urlencoded","extended","cookieParser","console","log","__dirname","hbs","viewEngine","extname","layoutsDir","path","resolve","partialsDir","viewPath","extName","initializeRoutes","routes","forEach","route","router","initializeSwagger","options","swaggerDefinition","title","version","description","apis","specs","swaggerJSDoc","swaggerUi","serve","setup","initializeErrorHandling","errorMiddleware","constructor","NODE_ENV","PORT","driver","neo4j","NEO4J_URI","basic","NEO4J_USERNAME","NEO4J_PASSWORD","verifyConnectivity","error"],"mappings":"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"}