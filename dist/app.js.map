{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import compression from 'compression';\r\nimport cookieParser from 'cookie-parser';\r\nimport cors from 'cors';\r\nimport express from 'express';\r\nimport helmet from 'helmet';\r\nimport neo4j from 'neo4j-driver';\r\nimport hpp from 'hpp';\r\nimport admin from \"firebase-admin\";\r\nimport morgan from 'morgan';\r\nimport swaggerJSDoc from 'swagger-jsdoc';\r\nimport swaggerUi from 'swagger-ui-express';\r\nimport { NODE_ENV, PORT, LOG_FORMAT, ORIGIN, CREDENTIALS } from '@config';\r\nimport { Routes } from '@interfaces/routes.interface';\r\nimport errorMiddleware from '@middlewares/error.middleware';\r\nimport { logger, stream } from '@utils/logger';\r\nimport nodemailer from 'nodemailer';\r\nimport hbs from 'nodemailer-express-handlebars';\r\nimport path from 'path';\r\nimport walletService from './services/wallet.service';\r\nimport UserService from './services/users.service';\r\nimport Stripe from 'stripe';\r\nimport NotificationService from './services/notification.service';\r\n\r\nexport const transporter = nodemailer.createTransport({\r\n  service: process.env.SERVICE,\r\n  secure: Boolean(process.env.SECURE),\r\n  auth: {\r\n    user: process.env.USER,\r\n    pass: process.env.PASS,\r\n  },\r\n});\r\n\r\nclass App {\r\n  public walletService = new walletService();\r\n  public userService = new UserService();\r\n  public notificationService = new NotificationService();\r\n  public app: express.Application;\r\n  public env: string;\r\n  public port: string | number;\r\n\r\n  constructor(routes: Routes[]) {\r\n    this.app = express();\r\n    this.env = NODE_ENV || 'development';\r\n    this.port = PORT || 3000;\r\n    this.app.post('/webhook', express.raw({ type: 'application/json' }), async (req, res, next): Promise<void> => {\r\n      try {\r\n        const stripe = new Stripe(process.env.STRIPE_TEST_KEY, { apiVersion: '2022-11-15' });\r\n        let signature = req.headers['stripe-signature'];\r\n        if (!signature) res.status(201).json({ message: 'signature needed' });\r\n        let event;\r\n        try {\r\n          event = stripe.webhooks.constructEvent(req.body, signature, process.env.WEBHOOK_SIGNATURE);\r\n        } catch (err) {\r\n          console.log(err.message);\r\n        }\r\n\r\n        switch (event.type) {\r\n          case 'charge.succeeded':\r\n            console.log(event.data.object);\r\n          case 'checkout.session.completed':\r\n            switch (event.data.object.mode) {\r\n              case 'payment':\r\n                event.data.object.metadata.sellersIds.split(',').map((record: any) => {\r\n                  let sellerId = '';\r\n                  let postId = '';\r\n                  let amount = 0;\r\n                  record.split('.').map((record: any) => {\r\n                    switch (record.split(':')[0]) {\r\n                      case 'sellerId':\r\n                        sellerId = record.split(':')[1];\r\n                        break;\r\n                      case 'postId':\r\n                        postId = record.split(':')[1];\r\n                        break;\r\n                      case 'amount':\r\n                        amount = record.split(':')[1];\r\n                        break;\r\n                      default:\r\n                        break;\r\n                    }\r\n                  });\r\n                  this.userService.checkForSale(event.data.object.customer, postId).then(async exists => {\r\n                    if (exists) return;\r\n                    await this.userService.buyPost(postId, event.data.object.customer, sellerId, amount);\r\n                    await this.walletService.UpdateBalanceForPayment(sellerId, amount);\r\n                    const title = \"Album Sold\"\r\n                    const body = `congratulations, a customer just bought an album.`\r\n                    await this.notificationService.pushSellerNotificatons(sellerId, title, body)\r\n                   \r\n                  });\r\n\r\n                });\r\n                break;\r\n              case 'subscription':\r\n                this.userService.createSubscriptioninDb(\r\n                  event.data.object.customer,\r\n                  event.data.object.metadata.sellerId,\r\n                  event.data.object.metadata.subscriptionPlanTitle,\r\n                  event.data.object.metadata.subscriptionPlanPrice,\r\n                );\r\n                this.walletService.UpdateBalanceForSubscription(\r\n                  event.data.object.metadata.sellerId,\r\n                  event.data.object.metadata.subscriptionPlanPrice,\r\n                );\r\n                const title = \"Subscription\"\r\n                const body = `congratulations, a customer just subscribed to the plan ${event.data.object.metadata.subscriptionPlanTitle}`\r\n\r\n                this.notificationService.pushSellerNotificatons(event.data.object.metadata.sellerId, title, body)\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n\r\n            break;\r\n          case 'payment_method.attached':\r\n            const paymentMethod = event.data.object;\r\n            console.log(paymentMethod);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n    this.initializeMiddlewares();\r\n    this.initializeRoutes(routes);\r\n    this.initializeSwagger();\r\n    this.initializeErrorHandling();\r\n    admin.initializeApp({\r\n      credential: admin.credential.cert(path.join(__dirname, \"./config/push_notification_key.json\")),\r\n      projectId: process.env.projectId\r\n    })\r\n  }\r\n\r\n  public listen() {\r\n    this.app.listen(this.port, () => {\r\n      logger.info(`=================================`);\r\n      logger.info(`======= ENV: ${this.env} =======`);\r\n      logger.info(`ðŸš€ App listening on the port ${this.port}`);\r\n      logger.info(`=================================`);\r\n    });\r\n  }\r\n\r\n  public getServer() {\r\n    return this.app;\r\n  }\r\n\r\n  private initializeMiddlewares() {\r\n    this.app.use(morgan(LOG_FORMAT, { stream }));\r\n    this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }));\r\n    this.app.use(hpp());\r\n    this.app.use(helmet());\r\n    this.app.use(compression());\r\n    this.app.use(express.json());\r\n    this.app.use(express.urlencoded({ extended: true }));\r\n    this.app.use(cookieParser());\r\n    this.app.use(\"/public\", express.static(path.resolve(path.join(__dirname, \"../public\"))));\r\n    transporter.use(\r\n      'compile',\r\n      hbs({\r\n        viewEngine: {\r\n          extname: '.handlebars',\r\n          layoutsDir: path.resolve(__dirname, '../public/views/'),\r\n          partialsDir: path.resolve(__dirname, '../public/views/'),\r\n        },\r\n        viewPath: path.resolve(__dirname, '../public/views/'),\r\n        extName: '.handlebars',\r\n      }),\r\n    );\r\n  }\r\n\r\n  private initializeRoutes(routes: Routes[]) {\r\n    routes.forEach(route => {\r\n      this.app.use('/', route.router);\r\n    });\r\n  }\r\n\r\n  private initializeSwagger() {\r\n    const options = {\r\n      swaggerDefinition: {\r\n        info: {\r\n          title: 'REST API',\r\n          version: '1.0.0',\r\n          description: 'Example docs',\r\n        },\r\n      },\r\n      apis: ['swagger.yaml'],\r\n    };\r\n\r\n    const specs = swaggerJSDoc(options);\r\n    this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));\r\n  }\r\n\r\n  private initializeErrorHandling() {\r\n    this.app.use(errorMiddleware);\r\n  }\r\n}\r\n\r\nexport function initializeDbConnection() {\r\n  try {\r\n    const driver = neo4j.driver(process.env.NEO4J_URI, neo4j.auth.basic(process.env.NEO4J_USERNAME, process.env.NEO4J_PASSWORD));\r\n\r\n    driver.verifyConnectivity();\r\n    console.log('Driver created');\r\n    return driver;\r\n  } catch (error) {\r\n    console.log(`connectivity verification failed. ${error}`);\r\n  }\r\n}\r\n\r\nexport default App;\r\n"],"names":["transporter","initializeDbConnection","nodemailer","createTransport","service","process","env","SERVICE","secure","Boolean","SECURE","auth","user","USER","pass","PASS","App","listen","app","port","logger","info","getServer","initializeMiddlewares","use","morgan","LOG_FORMAT","stream","cors","origin","ORIGIN","credentials","CREDENTIALS","hpp","helmet","compression","express","json","urlencoded","extended","cookieParser","static","path","resolve","join","__dirname","hbs","viewEngine","extname","layoutsDir","partialsDir","viewPath","extName","initializeRoutes","routes","forEach","route","router","initializeSwagger","options","swaggerDefinition","title","version","description","apis","specs","swaggerJSDoc","swaggerUi","serve","setup","initializeErrorHandling","errorMiddleware","constructor","walletService","userService","UserService","notificationService","NotificationService","NODE_ENV","PORT","post","raw","type","req","res","next","stripe","Stripe","STRIPE_TEST_KEY","apiVersion","signature","headers","status","message","event","webhooks","constructEvent","body","WEBHOOK_SIGNATURE","err","console","log","data","object","mode","metadata","sellersIds","split","map","record","sellerId","postId","amount","checkForSale","customer","then","exists","buyPost","UpdateBalanceForPayment","pushSellerNotificatons","createSubscriptioninDb","subscriptionPlanTitle","subscriptionPlanPrice","UpdateBalanceForSubscription","paymentMethod","error","admin","initializeApp","credential","cert","projectId","driver","neo4j","NEO4J_URI","basic","NEO4J_USERNAME","NEO4J_PASSWORD","verifyConnectivity"],"mappings":"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"}