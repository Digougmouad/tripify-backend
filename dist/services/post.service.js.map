{"version":3,"sources":["../../src/services/post.service.ts"],"sourcesContent":["import { initializeDbConnection } from '@/app';\nimport { uid } from 'uid';\nimport moment from 'moment';\n\nclass postService {\n  public async getPopularPosts() {\n    const popularPostsSessio = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const popularPosts = await popularPostsSessio.executeWrite(tx =>\n        tx.run('match (p:post)-[HAS_A]-(s:seller)-[IS_A]-(u:user) return u, p order by p.views DESC limit 20'),\n      );\n      const posts = popularPosts.records.map(record => record.get('p').properties);\n      posts.map((post, i) => {\n        const user = popularPosts.records.map(record => record.get('u').properties)[i];\n        return (post['user'] = user);\n      });\n      return posts;\n    } catch (error) {\n      console.log(error);\n    } finally {\n      popularPostsSessio.close();\n    }\n  }\n\n  public async getRecentPosts() {\n    const recentPostsSession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const popularPosts = await recentPostsSession.executeWrite(tx =>\n        tx.run('match (p:post)-[HAS_A]-(s:seller)-[IS_A]-(u:user) return u, p order by p.createdAt DESC limit 2'),\n      );\n      const posts = popularPosts.records.map(record => record.get('p').properties);\n      posts.map((post, i) => {\n        const user = popularPosts.records.map(record => record.get('u').properties)[i];\n        return (post['user'] = user);\n      });\n      return posts;\n    } catch (error) {\n      console.log(error);\n    } finally {\n      recentPostsSession.close();\n    }\n  }\n\n  public async UpdateViews(postId) {\n    const updateViewsSession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const newViews = await updateViewsSession.executeWrite(tx =>\n        tx.run('match (p:post {id: $postId}) set p.views = p.views + 1 return p.views', {\n          postId: postId,\n        }),\n      );\n      return newViews.records[0]._fields[0].low;\n    } catch (error) {\n      console.log(error);\n    } finally {\n      updateViewsSession.close();\n    }\n  }\n\n  public async createPost(userId, postData) {\n    const createPostSession = initializeDbConnection().session({ database: 'neo4j' });\n\n    try {\n      const findUser = await createPostSession.executeRead(tx => tx.run('match (u:user {id: $id}) return u', { id: userId }));\n      if (findUser.records.length == 0) return { message: `This user doesn't exists` };\n      if (!postData.data.postTitle || !postData.data.postDescription || !postData.data.price || !postData.data.preview || !postData.data.pictures)\n        return { message: `missing data` };\n      const createdCollection = await createPostSession.executeWrite(tx =>\n        tx.run(\n          'match (u:user {id: $userId})-[IS_A]-(s:seller) create (s)-[h: HAS_A]->(p:post {id: $postId, description: $description, title: $title, price: $price, createdAt: $createdAt, views: 0})-[r: HAS_A]->(c:collection {id: $collectionId, preview: $preview}) return c',\n          {\n            userId: userId,\n            postId: uid(40),\n            createdAt: moment().format('MMMM DD, YYYY'),\n            title: postData.data.postTitle,\n            description: postData.data.postDescription,\n            price: postData.data.price,\n            collectionId: uid(40),\n            preview: postData.data.preview,\n          },\n        ),\n      );\n\n      postData.data.pictures.map(picture => {\n        this.createPictures(picture.description, picture.value, createdCollection.records.map(record => record.get('c').properties.id)[0]);\n      });\n\n      return createdCollection;\n    } catch (error) {\n      console.log(error);\n    } finally {\n      createPostSession.close();\n    }\n  }\n\n  public async createPictures(postDescription, value, collectionId) {\n    const createPicturesSession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      await createPicturesSession.executeWrite(tx =>\n        tx.run(\n          'match (c:collection {id: $collectionId}) create (c)-[r: HAS_A]->(p: picture {id: $pictureId, value: $value, description: $description})',\n          {\n            description: postDescription,\n            pictureId: uid(40),\n            value: value,\n            collectionId: collectionId,\n          },\n        ),\n      );\n    } catch (error) {\n      console.log(error);\n    } finally {\n      createPicturesSession.close();\n    }\n  }\n}\n\nexport default postService;\n"],"names":["postService","getPopularPosts","popularPostsSessio","initializeDbConnection","session","database","popularPosts","executeWrite","tx","run","posts","records","map","record","get","properties","post","i","user","error","console","log","close","getRecentPosts","recentPostsSession","UpdateViews","postId","updateViewsSession","newViews","_fields","low","createPost","userId","postData","createPostSession","findUser","executeRead","id","length","message","data","postTitle","postDescription","price","preview","pictures","createdCollection","uid","createdAt","moment","format","title","description","collectionId","picture","createPictures","value","createPicturesSession","pictureId"],"mappings":"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"}