{"version":3,"sources":["../../src/services/post.service.ts"],"sourcesContent":["import { initializeDbConnection } from '@/app';\nimport { uid } from 'uid';\nimport aws from 'aws-sdk';\nimport moment from 'moment';\n\nclass postService {\n  public async getPopularPosts(categoryId) {\n    const popularPostsSessio = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const popularPosts = await popularPostsSessio.executeRead(tx =>\n        tx.run(\n          'match (category {id: $categoryId})<-[:OF_A]-(p:post)<-[:HAS_A]-(s:seller)-[:IS_A]-(u:user) return u ,p order by p.views DESC limit 20',\n          {\n            categoryId: categoryId,\n          },\n        ),\n      );\n\n      console.log(categoryId);\n\n      const posts = popularPosts.records.map(record => record.get('p').properties);\n\n      posts.map((post, i) => {\n        const user = popularPosts.records.map(record => record.get('u').properties)[i];\n        post['user'] = user;\n        return post;\n      });\n      return posts;\n    } catch (error) {\n      console.log(error);\n    } finally {\n      popularPostsSessio.close();\n    }\n  }\n\n  public async getRecentPosts(categoryId) {\n    const recentPostsSession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const popularPosts = await recentPostsSession.executeRead(tx =>\n        tx.run(\n          'match (category {id: $categoryId})<-[:OF_A]-(p:post)-[:HAS_A]-(s:seller)-[:IS_A]-(u:user) return u, p order by p.createdAt DESC limit 20',\n          {\n            categoryId: categoryId,\n          },\n        ),\n      );\n      const posts = popularPosts.records.map(record => record.get('p').properties);\n      posts.map((post, i) => {\n        const user = popularPosts.records.map(record => record.get('u').properties)[i];\n        return (post['user'] = user);\n      });\n      return posts;\n    } catch (error) {\n      console.log(error);\n    } finally {\n      recentPostsSession.close();\n    }\n  }\n\n  public async getPostPictures(postId) {\n    const getPostPicturesSession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const pictures = await getPostPicturesSession.executeWrite(tx =>\n        tx.run('match (post {id: $postId})-[:HAS_A]->(collection)-[:HAS_A]->(pct:picture) return pct', {\n          postId: postId,\n        }),\n      );\n      return pictures.records.map(record => record.get('pct').properties);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      getPostPicturesSession.close();\n    }\n  }\n\n  public async UpdateViews(postId) {\n    const updateViewsSession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const newViews = await updateViewsSession.executeWrite(tx =>\n        tx.run('match (p:post {id: $postId}) set p.views = p.views + 1 return p.views', {\n          postId: postId,\n        }),\n      );\n      return newViews.records[0]._fields[0].low;\n    } catch (error) {\n      console.log(error);\n    } finally {\n      updateViewsSession.close();\n    }\n  }\n\n  public async createPost(userId, postData) {\n    const createPostSession = initializeDbConnection().session({ database: 'neo4j' });\n    const linkCategorySession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const findUser = await createPostSession.executeRead(tx => tx.run('match (u:user {id: $userId}) return u', { userId: userId }));\n      if (findUser.records.length == 0) return { message: `This user doesn't exist` };\n      if (!postData.data.postTitle || !postData.data.postDescription || !postData.data.price || !postData.data.preview || !postData.data.pictures)\n        return { message: `missing data` };\n      const createdCollection = await createPostSession.executeWrite(tx =>\n        tx.run(\n          'match (u:user {id: $userId})-[IS_A]-(s:seller) create (s)-[h: HAS_A]->(p:post {id: $postId, description: $description, title: $title, price: $price, createdAt: $createdAt, views: 0, likes: 0})-[:HAS_A]->(c:collection {id: $collectionId, preview: $preview}) return c, p',\n          {\n            userId: userId,\n            postId: uid(40),\n            createdAt: moment().format('MMMM DD, YYYY'),\n            title: postData.data.postTitle,\n            description: postData.data.postDescription,\n            price: postData.data.price,\n            collectionId: uid(40),\n            preview: postData.data.preview,\n          },\n        ),\n      );\n\n      postData.data.pictures.map(picture => {\n        aws.config.update({\n          accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n          secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n          region: 'us-east-2',\n        });\n        const filecontent = Buffer.from(picture.value, 'binary');\n        const s3 = new aws.S3();\n\n        const params = {\n          Bucket: process.env.AWS_BUCKET_NAME,\n          Key: picture.description,\n          Body: filecontent,\n        };\n\n        s3.upload(params, (err, data) => {\n          if (err) return console.log(err);\n          this.createPictures(picture.description, data.Location, createdCollection.records.map(record => record.get('c').properties.id)[0]);\n        });\n      });\n\n      await linkCategorySession.executeWrite(tx =>\n        tx.run('match (ca:category {id: $categoryId}), (p:post {id: $postId}) create (p)-[:OF_A]->(ca)', {\n          postId: createdCollection.records.map(record => record.get('p').properties.id)[0],\n          categoryId: postData.data.categoryId,\n        }),\n      );\n\n      return createdCollection.records.map(record => record.get('p').properties)[0];\n    } catch (error) {\n      console.log(error);\n    } finally {\n      createPostSession.close();\n      linkCategorySession.close();\n    }\n  }\n\n  public async likePost(postId) {\n    const likePostSession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const likes = await likePostSession.executeWrite(tx =>\n        tx.run('match (p:post {id: $postId}) set p.likes = p.likes + 1 return p', {\n          postId: postId,\n        }),\n      );\n\n      return likes.records.map(record => record.get('p').properties.likes.low)[0];\n    } catch (error) {\n      console.log(error);\n    } finally {\n      likePostSession.close();\n    }\n  }\n\n  public async createPictures(pictureDescription, value, collectionId) {\n    const createPicturesSession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      await createPicturesSession.executeWrite(tx =>\n        tx.run(\n          'match (c:collection {id: $collectionId}) create (c)-[r: HAS_A]->(p: picture {id: $pictureId, value: $value, description: $description})',\n          {\n            description: pictureDescription,\n            pictureId: uid(40),\n            value: value,\n            collectionId: collectionId,\n          },\n        ),\n      );\n    } catch (error) {\n      console.log(error);\n    } finally {\n      createPicturesSession.close();\n    }\n  }\n}\n\nexport default postService;\n"],"names":["postService","getPopularPosts","categoryId","popularPostsSessio","initializeDbConnection","session","database","popularPosts","executeRead","tx","run","console","log","posts","records","map","record","get","properties","post","i","user","error","close","getRecentPosts","recentPostsSession","getPostPictures","postId","getPostPicturesSession","pictures","executeWrite","UpdateViews","updateViewsSession","newViews","_fields","low","createPost","userId","postData","createPostSession","linkCategorySession","findUser","length","message","data","postTitle","postDescription","price","preview","createdCollection","uid","createdAt","moment","format","title","description","collectionId","picture","aws","config","update","accessKeyId","process","env","AWS_ACCESS_KEY_ID","secretAccessKey","AWS_SECRET_ACCESS_KEY","region","filecontent","Buffer","from","value","s3","S3","params","Bucket","AWS_BUCKET_NAME","Key","Body","upload","err","createPictures","Location","id","likePost","likePostSession","likes","pictureDescription","createPicturesSession","pictureId"],"mappings":"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"}