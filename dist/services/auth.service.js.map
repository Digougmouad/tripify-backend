{"version":3,"sources":["../../src/services/auth.service.ts"],"sourcesContent":["import { hash, compare } from 'bcrypt';\r\nimport { sign, verify } from 'jsonwebtoken';\r\nimport { SECRET_KEY } from '@config';\r\nimport { HttpException } from '@exceptions/HttpException';\r\nimport { User } from '@interfaces/users.interface';\r\nimport userModel from '@models/users.model';\r\nimport { isEmpty } from '@utils/util';\r\nimport { initializeDbConnection } from '@/app';\r\nimport { RolesEnum } from '../enums/RolesEnums';\r\nimport uid from 'uid';\r\nimport moment from 'moment';\r\nimport { transporter } from '@/app';\r\nimport aws from 'aws-sdk';\r\nimport Stripe from 'stripe';\r\n\r\nclass AuthService {\r\n  public users = userModel;\r\n\r\n  public async signup(userData) {\r\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\r\n    const stripe = new Stripe(process.env.STRIPE_TEST_KEY, { apiVersion: '2022-11-15' });\r\n    const signupSession = initializeDbConnection().session({ database: 'neo4j' });\r\n    const createWalletSession = initializeDbConnection().session({ database: 'neo4j' });\r\n\r\n    const email = userData.data.email;\r\n    try {\r\n      const findUser = await signupSession.executeRead(tx => tx.run('match (u:user {email: $email}) return u', { email: email }));\r\n      if (findUser.records.length > 0) return { message: `This email ${userData.data.email} already exists` };\r\n      const hashedPassword = await hash(userData.data.password, 10);\r\n      if (!userData.data.role || !userData.data.name || !userData.data.userName || !userData.data.password) return { message: 'mlissing data' };\r\n      switch (userData.data.role) {\r\n        case RolesEnum.SELLER:\r\n          if (!userData.data.phone || userData.data.plans.length == 0) return { message: 'data missing' };\r\n\r\n          const sellerCustomer = await stripe.customers.create({\r\n            name: userData.data.name,\r\n            email: email,\r\n            balance: 0,\r\n          });\r\n\r\n          const seller = await stripe.accounts.create({\r\n            email: userData.data.email,\r\n            type: 'express',\r\n          });\r\n\r\n          const createUserSeller = await signupSession.executeWrite(tx =>\r\n            tx.run(\r\n              'create (u:user {id: $userId, name: $name, email: $email, userName: $userName, avatar: \"\", password: $password, createdAt: $createdAt, confirmed: false, verified: false, desactivated: false, phone: $phone, followers: $followers, followings: $followings})-[r: IS_A]->(s:seller {id: $sellerId, verified: $verified}) create (d:deviceToken {token: $token})<-[:logged_in_with]-(u) return u, s',\r\n              {\r\n                userId: sellerCustomer.id,\r\n                followers: 0,\r\n                followings: 0,\r\n                buyerId: uid.uid(40),\r\n                token: userData.data.deviceToken,\r\n                createdAt: moment().format('MMMM DD, YYYY'),\r\n                email: email,\r\n                userName: userData.data.userName,\r\n                name: userData.data.name,\r\n                password: hashedPassword,\r\n                sellerId: seller.id,\r\n                verified: false,\r\n                phone: userData.data.phone,\r\n              },\r\n            ),\r\n          );\r\n\r\n          await createWalletSession.executeWrite(tx =>\r\n            tx.run('match (s:seller {id: $sellerId}) create (s)-[:HAS_A]->(:wallet {id: $walletId, amount: 0.0})', {\r\n              sellerId: createUserSeller.records.map(record => record.get('s').properties.id)[0],\r\n              walletId: uid.uid(40),\r\n            }),\r\n          );\r\n\r\n          userData.data.plans.map(async (plan: any) => {\r\n            const createPlansSession = initializeDbConnection().session({ database: 'neo4j' });\r\n            try {\r\n              const stripeCreatedPlan = await stripe.products.create({\r\n                name: plan.name,\r\n              });\r\n              const stripeCreatedPrice = await stripe.prices.create({\r\n                currency: \"EUR\",\r\n                product: stripeCreatedPlan.id,\r\n                recurring: {\r\n                  interval: \"month\",\r\n                  interval_count: 1,\r\n                },\r\n                unit_amount: plan.price * 100\r\n              });\r\n\r\n              await createPlansSession.executeWrite(tx =>\r\n                tx.run('match (s:seller {id: $sellerId}) create (s)-[:HAS_A]->(:plan {id: $planId, name: $name, price: $price})', {\r\n                  sellerId: createUserSeller.records.map(record => record.get('s').properties.id)[0],\r\n                  planId: stripeCreatedPrice.id,\r\n                  name: plan.name,\r\n                  price: plan.price,\r\n                }),\r\n              );\r\n            } catch (error) {\r\n              console.log(error);\r\n            } finally {\r\n              createPlansSession.close();\r\n            }\r\n          });\r\n\r\n          const sellerToken = this.createToken(process.env.EMAIL_SECRET, createUserSeller.records.map(record => record.get('u').properties.id)[0]);\r\n\r\n          this.sendVerificationEmail(email, userData.data.userName, sellerToken.token, 'selling');\r\n          return { tokenData: sellerToken, data: createUserSeller.records.map(record => record.get('u').properties)[0], role: RolesEnum.SELLER };\r\n          break;\r\n        case RolesEnum.BUYER:\r\n          const buyer = await stripe.customers.create({\r\n            name: userData.data.name,\r\n            email: email,\r\n            balance: 0,\r\n          });\r\n\r\n          const createdUserBuyer = await signupSession.executeWrite(tx =>\r\n            tx.run(\r\n              'create (u:user {id: $userId, avatar: \"\", name: $name, email: $email, userName: $userName, password: $password, createdAt: $createdAt, confirmed: false})-[r: IS_A]->(b:buyer {id: $buyerId}) create (d:deviceToken {token: $token})<-[:logged_in_with]-(u) return u',\r\n              {\r\n                userId: buyer.id,\r\n                buyerId: uid.uid(40),\r\n                token: userData.data.deviceToken,\r\n                createdAt: moment().format('MMMM DD, YYYY'),\r\n                email: email,\r\n                userName: userData.data.userName,\r\n                name: userData.data.name,\r\n                password: hashedPassword,\r\n              },\r\n            ),\r\n          );\r\n\r\n          const buyerToken = this.createToken(process.env.EMAIL_SECRET, createdUserBuyer.records.map(record => record.get('u').properties.id)[0]);\r\n          this.sendVerificationEmail(email, userData.data.userName, buyerToken.token, 'finding');\r\n\r\n          return { tokenData: buyerToken, data: createdUserBuyer.records.map(record => record.get('u').properties)[0], role: RolesEnum.BUYER };\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      await signupSession.close();\r\n      await createWalletSession.close();\r\n    }\r\n  }\r\n\r\n  public async sendVerificationEmail(email: string, userName: string, token: string, role: string) {\r\n    try {\r\n      const mailOptions = {\r\n        template: 'main',\r\n        from: process.env.USER,\r\n        to: email,\r\n        subject: 'Verifying Email',\r\n        context: {\r\n          userName: userName,\r\n          token: token,\r\n          role: role,\r\n        },\r\n      };\r\n\r\n      transporter.sendMail(mailOptions, (error: any, data: any) => {\r\n        if (error) console.log(error);\r\n        if (!error) console.log('sent');\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  public async changePassword(email: String, userData: any) {\r\n    const checkUserSession = initializeDbConnection().session();\r\n    const changePasswordSession = initializeDbConnection().session();\r\n    try {\r\n\r\n      const findUser = await checkUserSession.executeRead(tx => tx.run('match (u:user {email: $email}) return u', { email: email }));\r\n      if (findUser.records.length == 0) return { message: `old password is incorrect` };\r\n\r\n      const password = findUser.records.map(record => record.get('u').properties.password)[0];\r\n      const isPasswordMatching = await compare(userData.data.oldPassword, password);\r\n      if (!isPasswordMatching) return { message: 'old password is incorrect' };\r\n      const hashedPassword = await hash(userData.data.newPassword, 10);\r\n      const changedPassword = await changePasswordSession.executeWrite(tx =>\r\n        tx.run('match (u {email: $email}) set u.password = $newPassword return u', {\r\n          email: email,\r\n          newPassword: hashedPassword,\r\n        }),\r\n      );\r\n\r\n      return changedPassword.records.map(record => record.get('u').properties)[0];\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      changePasswordSession.close();\r\n    }\r\n  }\r\n\r\n  public async login(userData) {\r\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\r\n    const loginSession = initializeDbConnection().session({ database: 'neo4j' });\r\n\r\n    try {\r\n      const email = userData.data.email;\r\n\r\n      const findUser = await loginSession.executeRead(tx => tx.run('match (u:user {email: $email}) return u', { email: email }));\r\n      if (findUser.records.length == 0) return { message: `password or email is incorrect` };\r\n\r\n      const password = findUser.records.map(record => record.get('u').properties.password)[0];\r\n      const isPasswordMatching = await compare(userData.data.password, password);\r\n      const userId = findUser.records.map(record => record.get('u').properties.id)[0];\r\n      const deviceToken = userData.data.deviceToken;\r\n\r\n      if (!isPasswordMatching) return { message: 'password or email is incorrect' };\r\n\r\n      const tokenData = this.createToken(\r\n        process.env.SECRET_KEY,\r\n        userId,\r\n      );\r\n\r\n      const role = await loginSession.executeRead(tx =>\r\n        tx.run('match (u:user {id: $id})-[:IS_A]-(r:seller) return r', { id: userId }),\r\n      );\r\n      \r\n      await loginSession.executeWrite(tx =>\r\n        tx.run('match (u:user {id: $id})-[:logged_in_with]->(d:deviceToken) set d.token = $token', { id: userId, token: deviceToken }),\r\n      );\r\n\r\n      return { tokenData, data: findUser.records.map(record => record.get('u').properties)[0], role: role.records.length == 0 ? 'Buyer' : 'Seller' };\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      loginSession.close();\r\n    }\r\n  }  \r\n  \r\n\r\n  public async refreshToken(id: string) {\r\n\r\n    if (!id) return { message: 'missing token' };\r\n    const refreshSession = initializeDbConnection().session({ database: 'neo4j' });\r\n    try {\r\n      const tokenData = this.createRefreshToken(id);\r\n\r\n      return { tokenData };\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      refreshSession.close();\r\n    }\r\n  }\r\n\r\n  public async logout(userData: User): Promise<User> {\r\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\r\n\r\n    const findUser: User = this.users.find(user => user.email === userData.email && user.password === userData.password);\r\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\r\n\r\n    return findUser;\r\n  }\r\n\r\n  public createToken(secret: string, data: any) {\r\n    try {\r\n      const dataStoredInToken = { id: data };\r\n      const secretKey: string = secret;\r\n      const expiresAt: string = '60s';\r\n      const expiresIn: Date = new Date();\r\n      console.log(expiresIn);\r\n      expiresIn.setTime(expiresIn.getTime() + 60000);\r\n\r\n      console.log(expiresIn);\r\n\r\n\r\n      return { token: sign(dataStoredInToken, secretKey, { expiresIn: expiresAt }), expiresIn: moment(expiresIn).format(\"YYYY-MM-DD HH:mm:ss.ms\") };\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  public createRefreshToken(data) {\r\n    try {\r\n      const dataStoredInToken = { id: data, refresh: true };\r\n\r\n      const secretKey: string = SECRET_KEY;\r\n      const expiresAt: string = '60s';\r\n      const expiresIn: Date = new Date();\r\n      expiresIn.setTime(expiresIn.getTime() + 60);\r\n\r\n      return { token: sign(dataStoredInToken, secretKey, { expiresIn: expiresAt }), expiresIn: moment(expiresIn).format(\"YYYY-MM-DD hh:mm:ss.ms\") };\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  public createCookie(tokenData): string {\r\n    return `Authorization=${tokenData.token}; HttpOnly; Max-Age=${tokenData.expiresIn};`;\r\n  }\r\n}\r\n\r\nexport default AuthService;\r\n"],"names":["AuthService","signup","userData","isEmpty","HttpException","stripe","Stripe","process","env","STRIPE_TEST_KEY","apiVersion","signupSession","initializeDbConnection","session","database","createWalletSession","email","data","findUser","executeRead","tx","run","records","length","message","hashedPassword","hash","password","role","name","userName","RolesEnum","SELLER","phone","plans","sellerCustomer","customers","create","balance","seller","accounts","type","createUserSeller","executeWrite","userId","id","followers","followings","buyerId","uid","token","deviceToken","createdAt","moment","format","sellerId","verified","map","record","get","properties","walletId","plan","createPlansSession","stripeCreatedPlan","products","stripeCreatedPrice","prices","currency","product","recurring","interval","interval_count","unit_amount","price","planId","error","console","log","close","sellerToken","createToken","EMAIL_SECRET","sendVerificationEmail","tokenData","BUYER","buyer","createdUserBuyer","buyerToken","mailOptions","template","from","USER","to","subject","context","transporter","sendMail","changePassword","checkUserSession","changePasswordSession","isPasswordMatching","compare","oldPassword","newPassword","changedPassword","login","loginSession","SECRET_KEY","refreshToken","refreshSession","createRefreshToken","logout","users","find","user","secret","dataStoredInToken","secretKey","expiresAt","expiresIn","Date","setTime","getTime","sign","refresh","createCookie","userModel"],"mappings":"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"}