{"version":3,"sources":["../../src/services/auth.service.ts"],"sourcesContent":["import { hash, compare } from 'bcrypt';\nimport { sign, verify } from 'jsonwebtoken';\nimport { SECRET_KEY } from '@config';\nimport { HttpException } from '@exceptions/HttpException';\nimport { User } from '@interfaces/users.interface';\nimport userModel from '@models/users.model';\nimport { isEmpty } from '@utils/util';\nimport { initializeDbConnection } from '@/app';\nimport { RolesEnum } from '../enums/RolesEnums';\nimport uid from 'uid';\n\nclass AuthService {\n  public users = userModel;\n\n  public async signup(userData) {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const signupSession = initializeDbConnection().session({ database: 'neo4j' });\n    const email = userData.data.email;\n    try {\n      const findUser = await signupSession.executeRead(tx => tx.run('match (u:user {email: $email}) return u', { email: email }));\n      if (findUser.records.length > 0) return { message: `This email ${userData.data.email} already exists` };\n      const hashedPassword = await hash(userData.data.password, 10);\n      if (!userData.data.role) return { message: 'role needed' };\n      switch (userData.data.role) {\n        case RolesEnum.SELLER:\n          if (!userData.data.subscriptionPrice || !userData.data.identityPhoto) return { message: 'data missing' };\n\n          const createUserSeller = await signupSession.executeWrite(tx =>\n            tx.run(\n              'create (u:user {id: $userId, name: $name, email: $email, userName: $userName, password: $password, createdAt: $createdAt, avatar: $avatar})-[r: IS_A]->(s:seller {id: $sellerId, verified: $verified, identityPhoto: $identityPhoto, subscriptionPrice: $subscriptionPrice}) return u',\n              {\n                userId: uid.uid(40),\n                buyerId: uid.uid(40),\n                createdAt: Date.now(),\n                email: email,\n                avatar: userData.data.avatar ? userData.data.avatar : '',\n                userName: userData.data.userName,\n                name: userData.data.name,\n                password: hashedPassword,\n                sellerId: uid.uid(40),\n                identityPhoto: userData.data.identityPhoto,\n                verified: false,\n                subscriptionPrice: userData.data.subscriptionPrice,\n              },\n            ),\n          );\n\n          const sellerToken = this.createToken(createUserSeller.records.map(record => record.get('u').properties));\n          return { data: createUserSeller.records.map(record => record.get('u').properties), sellerToken };\n          break;\n        case RolesEnum.BUYER:\n          const createdUserBuyer = await signupSession.executeWrite(tx =>\n            tx.run(\n              'create (u:user {id: $userId, name: $name, email: $email, userName: $userName, password: $password, createdAt: $createdAt, avatar: $avatar})-[r: IS_A]->(b:buyer {id: $buyerId}) return u',\n              {\n                userId: uid.uid(40),\n                buyerId: uid.uid(40),\n                createdAt: Date.now(),\n                email: email,\n                avatar: userData.data.avatar ? userData.data.avatar : '',\n                userName: userData.data.userName,\n                name: userData.data.name,\n                password: hashedPassword,\n              },\n            ),\n          );\n          const buyerToken = this.createToken(createdUserBuyer.records.map(record => record.get('u').properties.id));\n          return { data: createdUserBuyer.records.map(record => record.get('u').properties), buyerToken };\n          break;\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      await signupSession.close();\n    }\n  }\n\n  public async login(userData) {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n    const loginSession = initializeDbConnection().session({ database: 'neo4j' });\n\n    try {\n      const email = userData.data.email;\n\n      const findUser = await loginSession.executeRead(tx => tx.run('match (u:user {email: $email}) return u', { email: email }));\n      if (findUser.records.length == 0) return { message: `This email ${userData.data.email} doesn't exists` };\n\n      const password = findUser.records.map(record => record.get('u').properties.password)[0];\n      const isPasswordMatching = await compare(userData.data.password, password);\n      console.log(findUser);\n\n      if (!isPasswordMatching) return { message: 'password or email is incorrect' };\n\n      const tokenData = this.createToken(findUser.records.map(record => record.get('u').properties.id));\n\n      return { tokenData, data: findUser.records.map(record => record.get('u').properties) };\n    } catch (error) {\n      console.log(error);\n    } finally {\n      loginSession.close();\n    }\n  }\n\n  public async refreshToken(token) {\n    if (!token) return { message: 'missing token' };\n    const refreshSession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const secretKey: string = SECRET_KEY;\n      const decoded = verify(token, secretKey);\n\n      const id: string = decoded.data[0];\n      const findUser = await refreshSession.executeRead(tx => tx.run('match (u:user {id: $id}) return u', { id: id }));\n\n      if (findUser.records.length == 0) return { message: 'refresh token is invalid' };\n\n      const refreshToken = this.createRefreshToken(token);\n\n      return { refreshToken };\n    } catch (error) {\n      console.log(error);\n    } finally {\n      refreshSession.close();\n    }\n  }\n\n  public async logout(userData: User): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const findUser: User = this.users.find(user => user.email === userData.email && user.password === userData.password);\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public createToken(data): TokenData {\n    try {\n      const dataStoredInToken = { data };\n      const secretKey: string = SECRET_KEY;\n      const expiresIn: number = 60 * 60;\n\n      return { token: sign(dataStoredInToken, secretKey, { expiresIn }) };\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  public createRefreshToken(data): TokenData {\n    try {\n      const dataStoredInToken = { data };\n      const secretKey: string = SECRET_KEY;\n      const expiresIn: string = '30 days';\n\n      return { token: sign(dataStoredInToken, secretKey, { expiresIn }) };\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  public createCookie(tokenData: TokenData): string {\n    return `Authorization=${tokenData.token}; HttpOnly; Max-Age=${tokenData.expiresIn};`;\n  }\n}\n\nexport default AuthService;\n"],"names":["AuthService","signup","userData","isEmpty","HttpException","signupSession","initializeDbConnection","session","database","email","data","findUser","executeRead","tx","run","records","length","message","hashedPassword","hash","password","role","RolesEnum","SELLER","subscriptionPrice","identityPhoto","createUserSeller","executeWrite","userId","uid","buyerId","createdAt","Date","now","avatar","userName","name","sellerId","verified","sellerToken","createToken","map","record","get","properties","BUYER","createdUserBuyer","buyerToken","id","error","console","log","close","login","loginSession","isPasswordMatching","compare","tokenData","refreshToken","token","refreshSession","secretKey","SECRET_KEY","decoded","verify","createRefreshToken","logout","users","find","user","dataStoredInToken","expiresIn","sign","createCookie","userModel"],"mappings":"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"}