{"version":3,"sources":["../../src/services/auth.service.ts"],"sourcesContent":["import { hash, compare } from 'bcrypt';\nimport { sign, verify } from 'jsonwebtoken';\nimport { SECRET_KEY } from '@config';\nimport { HttpException } from '@exceptions/HttpException';\nimport { User } from '@interfaces/users.interface';\nimport userModel from '@models/users.model';\nimport { isEmpty } from '@utils/util';\nimport { initializeDbConnection } from '@/app';\nimport { RolesEnum } from '../enums/RolesEnums';\nimport uid from 'uid';\nimport moment from 'moment';\nimport { transporter } from '@/app';\n\nclass AuthService {\n  public users = userModel;\n\n  public async signup(userData) {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const signupSession = initializeDbConnection().session({ database: 'neo4j' });\n    const createWalletSession = initializeDbConnection().session({ database: 'neo4j' });\n    const email = userData.data.email;\n    try {\n      const findUser = await signupSession.executeRead(tx => tx.run('match (u:user {email: $email}) return u', { email: email }));\n      if (findUser.records.length > 0) return { message: `This email ${userData.data.email} already exists` };\n      const hashedPassword = await hash(userData.data.password, 10);\n      if (!userData.data.role || !userData.data.name || !userData.data.userName || !userData.data.password) return { message: 'mlissing data' };\n      switch (userData.data.role) {\n        case RolesEnum.SELLER:\n          if (!userData.data.subscriptionPrice || !userData.data.identityPhoto) return { message: 'data missing' };\n\n          const createUserSeller = await signupSession.executeWrite(tx =>\n            tx.run(\n              'create (u:user {id: $userId, name: $name, email: $email, userName: $userName, password: $password, createdAt: $createdAt, avatar: $avatar, confirmed: false, desactivated: false})-[r: IS_A]->(s:seller {id: $sellerId, verified: $verified, identityPhoto: $identityPhoto, subscriptionPrice: $subscriptionPrice}) return u, s',\n              {\n                userId: uid.uid(40),\n                buyerId: uid.uid(40),\n                createdAt: moment().format('MMMM DD, YYYY'),\n                email: email,\n                avatar: userData.data.avatar ? userData.data.avatar : '',\n                userName: userData.data.userName,\n                name: userData.data.name,\n                password: hashedPassword,\n                sellerId: uid.uid(40),\n                identityPhoto: userData.data.identityPhoto,\n                verified: false,\n                subscriptionPrice: userData.data.subscriptionPrice,\n              },\n            ),\n          );\n\n          await createWalletSession.executeWrite(tx =>\n            tx.run('match (s:seller {id: $sellerId}) create (s)-[:HAS_A]->(wallet {id: $walletId, amount: 0})', {\n              sellerId: createUserSeller.records.map(record => record.get('s').properties.id)[0],\n              walletId: uid.uid(40),\n            }),\n          );\n\n          const sellerToken = this.createToken(process.env.EMAIL_SECRET, createUserSeller.records.map(record => record.get('u').properties.id)[0]);\n\n          this.sendVerificationEmail(email, userData.data.userName, sellerToken.token, 'selling');\n          return { data: createUserSeller.records.map(record => record.get('u').properties) };\n          break;\n        case RolesEnum.BUYER:\n          const createdUserBuyer = await signupSession.executeWrite(tx =>\n            tx.run(\n              'create (u:user {id: $userId, name: $name, email: $email, userName: $userName, password: $password, createdAt: $createdAt, avatar: $avatar, confirmed: false})-[r: IS_A]->(b:buyer {id: $buyerId}) return u',\n              {\n                userId: uid.uid(40),\n                buyerId: uid.uid(40),\n                createdAt: moment().format('MMMM DD, YYYY'),\n                email: email,\n                avatar: userData.data.avatar ? userData.data.avatar : '',\n                userName: userData.data.userName,\n                name: userData.data.name,\n                password: hashedPassword,\n              },\n            ),\n          );\n          const buyerToken = this.createToken(process.env.EMAIL_SECRET, createdUserBuyer.records.map(record => record.get('u').properties.id)[0]);\n          this.sendVerificationEmail(email, userData.data.userName, buyerToken.token, 'finding');\n\n          return { data: createdUserBuyer.records.map(record => record.get('u').properties)[0] };\n          break;\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      await signupSession.close();\n      await createWalletSession.close();\n    }\n  }\n\n  public async sendVerificationEmail(email: string, userName: string, token: string, role: string) {\n    try {\n      const mailOptions = {\n        template: 'main',\n        from: process.env.USER,\n        to: email,\n        subject: 'Verifying Email',\n        context: {\n          userName: userName,\n          token: token,\n          role: role,\n        },\n      };\n\n      transporter.sendMail(mailOptions, (error: any, data: any) => {\n        if (error) console.log(error);\n        if (!error) console.log('sent');\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  public async changePassword(userId, userData) {\n    const changePasswordSession = initializeDbConnection().session();\n    try {\n      const hashedPassword = await hash(userData.data.password, 10);\n      const changedPassword = await changePasswordSession.executeRead(tx =>\n        tx.run('match (u {id: $userId}) set u.password = $newPassword return w', {\n          userId: userId,\n          newPassword: hashedPassword\n        }),\n      );\n\n      return changedPassword.records.map(record => record.get('u').properties)[0];\n    } catch (error) {\n      console.log(error);\n    } finally {\n      changePasswordSession.close();\n    }\n  }\n\n\n  public async login(userData) {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n    const loginSession = initializeDbConnection().session({ database: 'neo4j' });\n\n    try {\n      const email = userData.data.email;\n\n      const findUser = await loginSession.executeRead(tx => tx.run('match (u:user {email: $email}) return u', { email: email }));\n      if (findUser.records.length == 0) return { message: `This email ${userData.data.email} doesn't exists` };\n\n      if (!findUser.records.map(record => record.get('u').properties.confirmed)[0])\n        return { message: `This email is not confirmed please confirm your email` };\n\n      const password = findUser.records.map(record => record.get('u').properties.password)[0];\n      const isPasswordMatching = await compare(userData.data.password, password);\n\n      if (!isPasswordMatching) return { message: 'password or email is incorrect' };\n\n      const tokenData = this.createToken(\n        process.env.SECRET_KEY,\n        findUser.records.map(record => record.get('u').properties.id),\n      );\n\n      return { tokenData, data: findUser.records.map(record => record.get('u').properties) };\n    } catch (error) {\n      console.log(error);\n    } finally {\n      loginSession.close();\n    }\n  }\n\n  public async refreshToken(token) {\n    if (!token) return { message: 'missing token' };\n    const refreshSession = initializeDbConnection().session({ database: 'neo4j' });\n    try {\n      const secretKey: string = SECRET_KEY;\n      const decoded = verify(token, secretKey);\n\n      const id: string = decoded.data[0];\n      const findUser = await refreshSession.executeRead(tx => tx.run('match (u:user {id: $id}) return u', { id: id }));\n\n      if (findUser.records.length == 0) return { message: 'refresh token is invalid' };\n\n      const refreshToken = this.createRefreshToken(token);\n\n      return { refreshToken };\n    } catch (error) {\n      console.log(error);\n    } finally {\n      refreshSession.close();\n    }\n  }\n\n  public async logout(userData: User): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const findUser: User = this.users.find(user => user.email === userData.email && user.password === userData.password);\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public createToken(secret, data) {\n    try {\n      const dataStoredInToken = { data };\n      const secretKey: string = secret;\n      const expiresIn: number = 60 * 60;\n\n      return { token: sign(dataStoredInToken, secretKey, { expiresIn }) };\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  public createRefreshToken(data) {\n    try {\n      const dataStoredInToken = { data };\n      const secretKey: string = SECRET_KEY;\n      const expiresIn: string = '30 days';\n\n      return { token: sign(dataStoredInToken, secretKey, { expiresIn }) };\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  public createCookie(tokenData): string {\n    return `Authorization=${tokenData.token}; HttpOnly; Max-Age=${tokenData.expiresIn};`;\n  }\n}\n\nexport default AuthService;\n"],"names":["AuthService","signup","userData","isEmpty","HttpException","signupSession","initializeDbConnection","session","database","createWalletSession","email","data","findUser","executeRead","tx","run","records","length","message","hashedPassword","hash","password","role","name","userName","RolesEnum","SELLER","subscriptionPrice","identityPhoto","createUserSeller","executeWrite","userId","uid","buyerId","createdAt","moment","format","avatar","sellerId","verified","map","record","get","properties","id","walletId","sellerToken","createToken","process","env","EMAIL_SECRET","sendVerificationEmail","token","BUYER","createdUserBuyer","buyerToken","error","console","log","close","mailOptions","template","from","USER","to","subject","context","transporter","sendMail","changePassword","changePasswordSession","changedPassword","newPassword","login","loginSession","confirmed","isPasswordMatching","compare","tokenData","SECRET_KEY","refreshToken","refreshSession","secretKey","decoded","verify","createRefreshToken","logout","users","find","user","secret","dataStoredInToken","expiresIn","sign","createCookie","userModel"],"mappings":";;;;+BAmOA;;aAAA;;wBAnO8B;8BACD;wBACF;+BACG;mDAER;sBACE;qBACe;4BACb;4CACV;+CACG;;;;;;AAGnB,IAAA,AAAMA,cAAN,MAAMA;IAGJ,MAAaC,OAAOC,QAAQ,EAAE;QAC5B,IAAIC,IAAAA,aAAO,EAACD,WAAW,MAAM,IAAIE,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,MAAMC,gBAAgBC,IAAAA,2BAAsB,IAAGC,OAAO,CAAC;YAAEC,UAAU;QAAQ;QAC3E,MAAMC,sBAAsBH,IAAAA,2BAAsB,IAAGC,OAAO,CAAC;YAAEC,UAAU;QAAQ;QACjF,MAAME,QAAQR,SAASS,IAAI,CAACD,KAAK;QACjC,IAAI;YACF,MAAME,WAAW,MAAMP,cAAcQ,WAAW,CAACC,CAAAA,KAAMA,GAAGC,GAAG,CAAC,2CAA2C;oBAAEL,OAAOA;gBAAM;YACxH,IAAIE,SAASI,OAAO,CAACC,MAAM,GAAG,GAAG,OAAO;gBAAEC,SAAS,CAAC,WAAW,EAAEhB,SAASS,IAAI,CAACD,KAAK,CAAC,eAAe,CAAC;YAAC;YACtG,MAAMS,iBAAiB,MAAMC,IAAAA,YAAI,EAAClB,SAASS,IAAI,CAACU,QAAQ,EAAE;YAC1D,IAAI,CAACnB,SAASS,IAAI,CAACW,IAAI,IAAI,CAACpB,SAASS,IAAI,CAACY,IAAI,IAAI,CAACrB,SAASS,IAAI,CAACa,QAAQ,IAAI,CAACtB,SAASS,IAAI,CAACU,QAAQ,EAAE,OAAO;gBAAEH,SAAS;YAAgB;YACxI,OAAQhB,SAASS,IAAI,CAACW,IAAI;gBACxB,KAAKG,qBAAS,CAACC,MAAM;oBACnB,IAAI,CAACxB,SAASS,IAAI,CAACgB,iBAAiB,IAAI,CAACzB,SAASS,IAAI,CAACiB,aAAa,EAAE,OAAO;wBAAEV,SAAS;oBAAe;oBAEvG,MAAMW,mBAAmB,MAAMxB,cAAcyB,YAAY,CAAChB,CAAAA,KACxDA,GAAGC,GAAG,CACJ,mUACA;4BACEgB,QAAQC,YAAG,CAACA,GAAG,CAAC;4BAChBC,SAASD,YAAG,CAACA,GAAG,CAAC;4BACjBE,WAAWC,IAAAA,eAAM,IAAGC,MAAM,CAAC;4BAC3B1B,OAAOA;4BACP2B,QAAQnC,SAASS,IAAI,CAAC0B,MAAM,GAAGnC,SAASS,IAAI,CAAC0B,MAAM,GAAG,EAAE;4BACxDb,UAAUtB,SAASS,IAAI,CAACa,QAAQ;4BAChCD,MAAMrB,SAASS,IAAI,CAACY,IAAI;4BACxBF,UAAUF;4BACVmB,UAAUN,YAAG,CAACA,GAAG,CAAC;4BAClBJ,eAAe1B,SAASS,IAAI,CAACiB,aAAa;4BAC1CW,UAAU,KAAK;4BACfZ,mBAAmBzB,SAASS,IAAI,CAACgB,iBAAiB;wBACpD;oBAIJ,MAAMlB,oBAAoBqB,YAAY,CAAChB,CAAAA,KACrCA,GAAGC,GAAG,CAAC,6FAA6F;4BAClGuB,UAAUT,iBAAiBb,OAAO,CAACwB,GAAG,CAACC,CAAAA,SAAUA,OAAOC,GAAG,CAAC,KAAKC,UAAU,CAACC,EAAE,CAAC,CAAC,EAAE;4BAClFC,UAAUb,YAAG,CAACA,GAAG,CAAC;wBACpB;oBAGF,MAAMc,cAAc,IAAI,CAACC,WAAW,CAACC,QAAQC,GAAG,CAACC,YAAY,EAAErB,iBAAiBb,OAAO,CAACwB,GAAG,CAACC,CAAAA,SAAUA,OAAOC,GAAG,CAAC,KAAKC,UAAU,CAACC,EAAE,CAAC,CAAC,EAAE;oBAEvI,IAAI,CAACO,qBAAqB,CAACzC,OAAOR,SAASS,IAAI,CAACa,QAAQ,EAAEsB,YAAYM,KAAK,EAAE;oBAC7E,OAAO;wBAAEzC,MAAMkB,iBAAiBb,OAAO,CAACwB,GAAG,CAACC,CAAAA,SAAUA,OAAOC,GAAG,CAAC,KAAKC,UAAU;oBAAE;oBAClF,KAAM;gBACR,KAAKlB,qBAAS,CAAC4B,KAAK;oBAClB,MAAMC,mBAAmB,MAAMjD,cAAcyB,YAAY,CAAChB,CAAAA,KACxDA,GAAGC,GAAG,CACJ,8MACA;4BACEgB,QAAQC,YAAG,CAACA,GAAG,CAAC;4BAChBC,SAASD,YAAG,CAACA,GAAG,CAAC;4BACjBE,WAAWC,IAAAA,eAAM,IAAGC,MAAM,CAAC;4BAC3B1B,OAAOA;4BACP2B,QAAQnC,SAASS,IAAI,CAAC0B,MAAM,GAAGnC,SAASS,IAAI,CAAC0B,MAAM,GAAG,EAAE;4BACxDb,UAAUtB,SAASS,IAAI,CAACa,QAAQ;4BAChCD,MAAMrB,SAASS,IAAI,CAACY,IAAI;4BACxBF,UAAUF;wBACZ;oBAGJ,MAAMoC,aAAa,IAAI,CAACR,WAAW,CAACC,QAAQC,GAAG,CAACC,YAAY,EAAEI,iBAAiBtC,OAAO,CAACwB,GAAG,CAACC,CAAAA,SAAUA,OAAOC,GAAG,CAAC,KAAKC,UAAU,CAACC,EAAE,CAAC,CAAC,EAAE;oBACtI,IAAI,CAACO,qBAAqB,CAACzC,OAAOR,SAASS,IAAI,CAACa,QAAQ,EAAE+B,WAAWH,KAAK,EAAE;oBAE5E,OAAO;wBAAEzC,MAAM2C,iBAAiBtC,OAAO,CAACwB,GAAG,CAACC,CAAAA,SAAUA,OAAOC,GAAG,CAAC,KAAKC,UAAU,CAAC,CAAC,EAAE;oBAAC;oBACrF,KAAM;YACV;QACF,EAAE,OAAOa,OAAO;YACdC,QAAQC,GAAG,CAACF;QACd,SAAU;YACR,MAAMnD,cAAcsD,KAAK;YACzB,MAAMlD,oBAAoBkD,KAAK;QACjC;IACF;IAEA,MAAaR,sBAAsBzC,KAAa,EAAEc,QAAgB,EAAE4B,KAAa,EAAE9B,IAAY,EAAE;QAC/F,IAAI;YACF,MAAMsC,cAAc;gBAClBC,UAAU;gBACVC,MAAMd,QAAQC,GAAG,CAACc,IAAI;gBACtBC,IAAItD;gBACJuD,SAAS;gBACTC,SAAS;oBACP1C,UAAUA;oBACV4B,OAAOA;oBACP9B,MAAMA;gBACR;YACF;YAEA6C,gBAAW,CAACC,QAAQ,CAACR,aAAa,CAACJ,OAAY7C,OAAc;gBAC3D,IAAI6C,OAAOC,QAAQC,GAAG,CAACF;gBACvB,IAAI,CAACA,OAAOC,QAAQC,GAAG,CAAC;YAC1B;QACF,EAAE,OAAOF,OAAO;YACdC,QAAQC,GAAG,CAACF;QACd;IACF;IAEA,MAAaa,eAAetC,MAAM,EAAE7B,QAAQ,EAAE;QAC5C,MAAMoE,wBAAwBhE,IAAAA,2BAAsB,IAAGC,OAAO;QAC9D,IAAI;YACF,MAAMY,iBAAiB,MAAMC,IAAAA,YAAI,EAAClB,SAASS,IAAI,CAACU,QAAQ,EAAE;YAC1D,MAAMkD,kBAAkB,MAAMD,sBAAsBzD,WAAW,CAACC,CAAAA,KAC9DA,GAAGC,GAAG,CAAC,kEAAkE;oBACvEgB,QAAQA;oBACRyC,aAAarD;gBACf;YAGF,OAAOoD,gBAAgBvD,OAAO,CAACwB,GAAG,CAACC,CAAAA,SAAUA,OAAOC,GAAG,CAAC,KAAKC,UAAU,CAAC,CAAC,EAAE;QAC7E,EAAE,OAAOa,OAAO;YACdC,QAAQC,GAAG,CAACF;QACd,SAAU;YACRc,sBAAsBX,KAAK;QAC7B;IACF;IAGA,MAAac,MAAMvE,QAAQ,EAAE;QAC3B,IAAIC,IAAAA,aAAO,EAACD,WAAW,MAAM,IAAIE,4BAAa,CAAC,KAAK,qBAAqB;QACzE,MAAMsE,eAAepE,IAAAA,2BAAsB,IAAGC,OAAO,CAAC;YAAEC,UAAU;QAAQ;QAE1E,IAAI;YACF,MAAME,QAAQR,SAASS,IAAI,CAACD,KAAK;YAEjC,MAAME,WAAW,MAAM8D,aAAa7D,WAAW,CAACC,CAAAA,KAAMA,GAAGC,GAAG,CAAC,2CAA2C;oBAAEL,OAAOA;gBAAM;YACvH,IAAIE,SAASI,OAAO,CAACC,MAAM,IAAI,GAAG,OAAO;gBAAEC,SAAS,CAAC,WAAW,EAAEhB,SAASS,IAAI,CAACD,KAAK,CAAC,eAAe,CAAC;YAAC;YAEvG,IAAI,CAACE,SAASI,OAAO,CAACwB,GAAG,CAACC,CAAAA,SAAUA,OAAOC,GAAG,CAAC,KAAKC,UAAU,CAACgC,SAAS,CAAC,CAAC,EAAE,EAC1E,OAAO;gBAAEzD,SAAS,CAAC,qDAAqD,CAAC;YAAC;YAE5E,MAAMG,WAAWT,SAASI,OAAO,CAACwB,GAAG,CAACC,CAAAA,SAAUA,OAAOC,GAAG,CAAC,KAAKC,UAAU,CAACtB,QAAQ,CAAC,CAAC,EAAE;YACvF,MAAMuD,qBAAqB,MAAMC,IAAAA,eAAO,EAAC3E,SAASS,IAAI,CAACU,QAAQ,EAAEA;YAEjE,IAAI,CAACuD,oBAAoB,OAAO;gBAAE1D,SAAS;YAAiC;YAE5E,MAAM4D,YAAY,IAAI,CAAC/B,WAAW,CAChCC,QAAQC,GAAG,CAAC8B,UAAU,EACtBnE,SAASI,OAAO,CAACwB,GAAG,CAACC,CAAAA,SAAUA,OAAOC,GAAG,CAAC,KAAKC,UAAU,CAACC,EAAE;YAG9D,OAAO;gBAAEkC;gBAAWnE,MAAMC,SAASI,OAAO,CAACwB,GAAG,CAACC,CAAAA,SAAUA,OAAOC,GAAG,CAAC,KAAKC,UAAU;YAAE;QACvF,EAAE,OAAOa,OAAO;YACdC,QAAQC,GAAG,CAACF;QACd,SAAU;YACRkB,aAAaf,KAAK;QACpB;IACF;IAEA,MAAaqB,aAAa5B,KAAK,EAAE;QAC/B,IAAI,CAACA,OAAO,OAAO;YAAElC,SAAS;QAAgB;QAC9C,MAAM+D,iBAAiB3E,IAAAA,2BAAsB,IAAGC,OAAO,CAAC;YAAEC,UAAU;QAAQ;QAC5E,IAAI;YACF,MAAM0E,YAAoBH,kBAAU;YACpC,MAAMI,UAAUC,IAAAA,oBAAM,EAAChC,OAAO8B;YAE9B,MAAMtC,KAAauC,QAAQxE,IAAI,CAAC,EAAE;YAClC,MAAMC,WAAW,MAAMqE,eAAepE,WAAW,CAACC,CAAAA,KAAMA,GAAGC,GAAG,CAAC,qCAAqC;oBAAE6B,IAAIA;gBAAG;YAE7G,IAAIhC,SAASI,OAAO,CAACC,MAAM,IAAI,GAAG,OAAO;gBAAEC,SAAS;YAA2B;YAE/E,MAAM8D,eAAe,IAAI,CAACK,kBAAkB,CAACjC;YAE7C,OAAO;gBAAE4B;YAAa;QACxB,EAAE,OAAOxB,OAAO;YACdC,QAAQC,GAAG,CAACF;QACd,SAAU;YACRyB,eAAetB,KAAK;QACtB;IACF;IAEA,MAAa2B,OAAOpF,QAAc,EAAiB;QACjD,IAAIC,IAAAA,aAAO,EAACD,WAAW,MAAM,IAAIE,4BAAa,CAAC,KAAK,qBAAqB;QAEzE,MAAMQ,WAAiB,IAAI,CAAC2E,KAAK,CAACC,IAAI,CAACC,CAAAA,OAAQA,KAAK/E,KAAK,KAAKR,SAASQ,KAAK,IAAI+E,KAAKpE,QAAQ,KAAKnB,SAASmB,QAAQ;QACnH,IAAI,CAACT,UAAU,MAAM,IAAIR,4BAAa,CAAC,KAAK,sBAAsB;QAElE,OAAOQ;IACT;IAEOmC,YAAY2C,MAAM,EAAE/E,IAAI,EAAE;QAC/B,IAAI;YACF,MAAMgF,oBAAoB;gBAAEhF;YAAK;YACjC,MAAMuE,YAAoBQ;YAC1B,MAAME,YAAoB,KAAK;YAE/B,OAAO;gBAAExC,OAAOyC,IAAAA,kBAAI,EAACF,mBAAmBT,WAAW;oBAAEU;gBAAU;YAAG;QACpE,EAAE,OAAOpC,OAAO;YACdC,QAAQC,GAAG,CAACF;QACd;IACF;IAEO6B,mBAAmB1E,IAAI,EAAE;QAC9B,IAAI;YACF,MAAMgF,oBAAoB;gBAAEhF;YAAK;YACjC,MAAMuE,YAAoBH,kBAAU;YACpC,MAAMa,YAAoB;YAE1B,OAAO;gBAAExC,OAAOyC,IAAAA,kBAAI,EAACF,mBAAmBT,WAAW;oBAAEU;gBAAU;YAAG;QACpE,EAAE,OAAOpC,OAAO;YACdC,QAAQC,GAAG,CAACF;QACd;IACF;IAEOsC,aAAahB,SAAS,EAAU;QACrC,OAAO,CAAC,cAAc,EAAEA,UAAU1B,KAAK,CAAC,oBAAoB,EAAE0B,UAAUc,SAAS,CAAC,CAAC,CAAC;IACtF;;aAlNOL,QAAQQ,mBAAS;;AAmN1B;MAEA,WAAe/F"}