{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { User } from '@interfaces/users.interface';\nimport userModel from '@models/users.model';\nimport { isEmpty } from '@utils/util';\nimport { initializeDbConnection } from '@/app';\nimport { verify } from 'jsonwebtoken';\n\nclass UserService {\n  public users = userModel;\n\n  public async findAllUser(): Promise<User[]> {\n    const users: User[] = this.users;\n    return users;\n  }\n\n  public async findUserById(userId) {\n    const getUserSession = initializeDbConnection().session();\n    try {\n      const result = await getUserSession.executeRead(tx =>\n        tx.run('match (u:user {id: $userId}) return u', {\n          userId: userId,\n        }),\n      );\n\n      if (!result.records.map(record => record.get('u').properties)) throw new HttpException(409, \"User doesn't exist\");\n\n      return result.records.map(record => record.get('u').properties)[0];\n    } catch (error) {\n      console.log(error);\n    } finally {\n      getUserSession.close();\n    }\n  }\n\n  public async changePassword(email, userData) {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n    const hashedPassword = await hash(userData.data.password, 10);\n    const changePasswordSession = initializeDbConnection().session();\n    try {\n      const updatedUser = await changePasswordSession.executeWrite(tx =>\n        tx.run('match (u:user {email: $email}) set u.password: $password return u', {\n          email: email,\n          password: hashedPassword,\n        }),\n      );\n      if (!updatedUser.records.map(record => record.get('u').properties)) throw new HttpException(409, \"User doesn't exist\");\n      return updatedUser.records.map(record => record.get('u').properties);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      changePasswordSession.close();\n    }\n  }\n\n  public async emailConfirming(token) {\n    const confirmEmailSession = initializeDbConnection().session();\n    try {\n      const tokenData = verify(token, process.env.EMAIL_SECRET);\n\n      const checkConfirmation = await confirmEmailSession.executeRead(tx =>\n        tx.run('match (u:user {id: $userId}) return u', {\n          userId: tokenData.data,\n        }),\n      );\n\n      if (checkConfirmation.records.map(record => record.get('u').properties.confirmed)[0]) return 'this account is already confirmed';\n\n      const confirmed = await confirmEmailSession.executeWrite(tx =>\n        tx.run('match (u:user {id: $userId}) set u.confirmed = true return u', {\n          userId: tokenData.data,\n        }),\n      );\n\n      return confirmed.records.map(record => record.get('u').properties.confirmed)[0];\n    } catch (error) {\n      console.log(error);\n    } finally {\n      confirmEmailSession.close();\n    }\n  }\n\n  public async updateUser(userId, userData): Promise<User[]> {\n    const updateUserSession = initializeDbConnection().session();\n    try {\n      const existUser = await this.findUserById(userId);\n\n      const updatedUser = await updateUserSession.executeWrite(tx =>\n        tx.run('match (u:user {id: $userId}) set u.name = $name, u.avatar = $avatar, u.username = $username,  return u', {\n          userId: userId,\n          name: userData.data.name ? userData.data.name : existUser.name,\n          userName: userData.data.userName ? userData.data.userName : existUser.userName,\n          avatar: userData.data.avatar ? userData.data.avatar : existUser.avatar,\n        }),\n      );\n\n      return updatedUser.records.map(record => record.get('u').properties)[0];\n    } catch (error) {\n      console.log(error);\n    } finally {\n      updateUserSession.close();\n    }\n  }\n\n  public async buyPost(postId, userData): Promise<User[]> {\n    const butPostSession = initializeDbConnection().session();\n    try {\n      const boughtPost = await butPostSession.executeWrite(tx => tx.run('match ()'));\n      return boughtPost.records.map(record => record.get(\"u\").properties)[0];\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  public async desactivateUser(userId: number): Promise<User[]> {\n    const desactivateUserSession = initializeDbConnection().session();\n    try {\n      const desactivatedUser = await desactivateUserSession.executeWrite(tx => tx.run('match (u:user {id: $userId}) set u.desactivated = true'));\n      return desactivatedUser.records.map(record => record.get(\"u\").properties)[0];\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n\nexport default UserService;\n"],"names":["UserService","findAllUser","users","findUserById","userId","getUserSession","initializeDbConnection","session","result","executeRead","tx","run","records","map","record","get","properties","HttpException","error","console","log","close","changePassword","email","userData","isEmpty","hashedPassword","hash","data","password","changePasswordSession","updatedUser","executeWrite","emailConfirming","token","confirmEmailSession","tokenData","verify","process","env","EMAIL_SECRET","checkConfirmation","confirmed","updateUser","updateUserSession","existUser","name","userName","avatar","buyPost","postId","butPostSession","boughtPost","desactivateUser","desactivateUserSession","desactivatedUser","userModel"],"mappings":"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"}