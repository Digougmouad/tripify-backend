{"version":3,"sources":["../../src/services/seller.service.ts"],"sourcesContent":["import { initializeDbConnection, stripe } from '@/app';\r\nimport { Buffer } from 'node:buffer';\r\nimport { writeFile } from 'node:fs';\r\nimport path from 'node:path';\r\nimport moment from 'moment';\r\n\r\nclass sellerService {\r\n  \r\n  public prices = [];\r\n\r\n  public async createSubscribePlans(userId: string, subscriptionPlansData: any[]) {\r\n    try {\r\n      const createdSubscriptionPlans = subscriptionPlansData.data.subscriptionPlans.map(subscriptionPlan => {\r\n        return this.createSubscribePlan(subscriptionPlan.subscriptionPlanPrice, subscriptionPlan.subscriptionPlanTitle, userId);\r\n      });\r\n\r\n      const subscriptionPlans = await Promise.all(createdSubscriptionPlans);\r\n\r\n      return subscriptionPlans;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  public async changePlans(plans: any[]) {\r\n    try {\r\n      const updatedPlans = plans.map(async plan => {\r\n        const oldPrice = await stripe.prices.retrieve(plan.id);\r\n        \r\n        await stripe.products.update(oldPrice.product.toString(), {\r\n          name: plan.name,\r\n        })\r\n        \r\n        const newPrice = await stripe.prices.create({\r\n          currency: \"EUR\",\r\n          product: oldPrice.product.toString(),\r\n          recurring: {\r\n            interval: \"month\",\r\n            interval_count: 1,\r\n          },\r\n          unit_amount: plan.price * 100\r\n        });\r\n        await stripe.prices.update(oldPrice.id, {\r\n          active: false\r\n        })\r\n        \r\n        return this.changePlansInDb(plan.id, newPrice.id, plan.name, plan.price);\r\n      })\r\n\r\n      return updatedPlans.length > 0 ? {\"message\": \"plans were updated successfully\"} : {\"message\": \"Something went wrong\"};\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  public async changePlansInDb(oldPlanId: string, newPlanId: string, name: string, price: number) {\r\n    const changePlanSession = initializeDbConnection().session();\r\n    try {\r\n      const updatedPlan = await changePlanSession.executeWrite(tx =>\r\n        tx.run('match (plan:plan {id: $planId}) set plan.id = $newPlanId, plan.name = $name, plan.price = $price', {\r\n          planId: oldPlanId,\r\n          newPlanId: newPlanId,\r\n          name: name,\r\n          price: price\r\n        }),\r\n      );\r\n      \r\n\r\n      return updatedPlan;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  public async getSubscriptiionPlans(userId: string) {\r\n    try {\r\n      const getSubscriptionPlansSession = initializeDbConnection().session();\r\n\r\n      const subscriptionPlans = await getSubscriptionPlansSession.executeWrite(tx =>\r\n        tx.run('match (user {id: $userId})-[:IS_A]->(s:seller)-[:HAS_A]->(subscriptionPlan:subscriptionPlan) return subscriptionPlan', {\r\n          userId: userId,\r\n        }),\r\n      );\r\n\r\n      return subscriptionPlans.records.map(record => record.get('subscriptionPlan').properties);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  public createSubscribePlan = async (subscriptionPlanPrice: number, subscriptionPlanTitle: string, userId: string) => {\r\n    const createSubscribePlansSession = initializeDbConnection().session();\r\n    try {\r\n      const product = await stripe.products.create({\r\n        name: subscriptionPlanTitle,\r\n      });\r\n\r\n      const price = await this.stripe.prices.create({\r\n        unit_amount: subscriptionPlanPrice * 100,\r\n        currency: 'eur',\r\n        recurring: { interval: 'month' },\r\n        metadata: {\r\n          sellerId: userId,\r\n        },\r\n        product: product.id,\r\n      });\r\n\r\n      const createdPlans = await createSubscribePlansSession.executeWrite(tx =>\r\n        tx.run(\r\n          'match (user {id: $userId})-[:IS_A]->(s:seller) create (s)-[:HAS_A]->(subscriptionPlan:subscriptionPlan {id: $subscriptionPlanId, price: $subscriptionPlanPrice, title: $subscriptionPlanTitle}) return subscriptionPlan',\r\n          {\r\n            subscriptionPlanPrice: subscriptionPlanPrice,\r\n            subscriptionPlanTitle: subscriptionPlanTitle,\r\n            userId: userId,\r\n            subscriptionPlanId: price.id,\r\n          },\r\n        ),\r\n      );\r\n\r\n      return createdPlans.records.map(record => record.get('subscriptionPlan').properties);\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      createSubscribePlansSession.close();\r\n    }\r\n  };\r\n\r\n  public getFollowersCount = async (sellerId: string) => {\r\n    const getFlowwersSession = initializeDbConnection().session();\r\n    try {\r\n      const followersCount = await getFlowwersSession.executeWrite(tx =>\r\n        tx.run('match (u:user)-[s:SUBSCRIBED_TO]->(seller {id: $sellerId}) return count(s) as followersCount', {\r\n          sellerId: sellerId,\r\n        }),\r\n      );\r\n      \r\n      return followersCount.records.map(record => record.get(\"followersCount\"))[0].low;\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      getFlowwersSession.close();\r\n    }\r\n  };\r\n\r\n  public uploadIdentityCard = async (identityCardData: any, userId: string) => {\r\n    try {\r\n      for (let key in identityCardData) {\r\n        console.log(identityCardData[key][0]);\r\n        \r\n        const filecontent = Buffer.from(identityCardData[key][0].buffer, 'binary');\r\n\r\n        writeFile(path.join(__dirname, \"../../public/files/identity_cards\", `${moment().format(\"ssMMyyyy\")}${userId}${identityCardData[key][0].originalname.replace(\".\", \"\")}`), filecontent, (err) => {\r\n          if (err) return console.log(err);\r\n          this.uploadIdentityCardToDb(`/public/files/identity_cards/${moment().format(\"ssMMyyyy\")}${userId}${identityCardData[key][0].originalname.replace(\".\", \"\")}`, userId, identityCardData[key].fieldname);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  public uploadIdentityCardToDb = async (location: string, userId: string, side: string) => {\r\n    const uploadIdentityCardSession = initializeDbConnection().session();\r\n    try {\r\n      switch (side) {\r\n        case 'frontSide':\r\n          await uploadIdentityCardSession.executeWrite(tx =>\r\n            tx.run('match (user {id: $userId})-[:IS_A]->(s:seller) set s.frontIdentityCard = $frontIdentityCard', {\r\n              userId: userId,\r\n              frontIdentityCard: location,\r\n            }),\r\n          );\r\n          break;\r\n        case 'backSide':\r\n          await uploadIdentityCardSession.executeWrite(tx =>\r\n            tx.run('match (user {id: $userId})-[:IS_A]->(s:seller) set s.backtIdentityCard = $backIdentityCard', {\r\n              userId: userId,\r\n              backIdentityCard: location,\r\n            }),\r\n          );\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      uploadIdentityCardSession.close();\r\n    }\r\n  };\r\n\r\n  \r\n}\r\n\r\nexport default sellerService;\r\n"],"names":["sellerService","createSubscribePlans","userId","subscriptionPlansData","createdSubscriptionPlans","data","subscriptionPlans","map","subscriptionPlan","createSubscribePlan","subscriptionPlanPrice","subscriptionPlanTitle","Promise","all","error","console","log","changePlans","plans","updatedPlans","plan","oldPrice","stripe","prices","retrieve","id","products","update","product","toString","name","newPrice","create","currency","recurring","interval","interval_count","unit_amount","price","active","changePlansInDb","length","oldPlanId","newPlanId","changePlanSession","initializeDbConnection","session","updatedPlan","executeWrite","tx","run","planId","getSubscriptiionPlans","getSubscriptionPlansSession","records","record","get","properties","createSubscribePlansSession","metadata","sellerId","createdPlans","subscriptionPlanId","close","getFollowersCount","getFlowwersSession","followersCount","low","uploadIdentityCard","identityCardData","key","filecontent","Buffer","from","buffer","writeFile","path","join","__dirname","moment","format","originalname","replace","err","uploadIdentityCardToDb","fieldname","location","side","uploadIdentityCardSession","frontIdentityCard","backIdentityCard"],"mappings":"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"}